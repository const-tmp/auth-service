// Code generated by microgen 1.0.5. DO NOT EDIT.

// Please, do not change functions names!
package transportgrpc

import (
	"context"
	"errors"
	empty "github.com/golang/protobuf/ptypes/empty"
	pb "github.com/nullc4t/auth-service/pkg/auth/proto"
	transport "github.com/nullc4t/auth-service/pkg/auth/transport"
)

func _Encode_Register_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil RegisterRequest")
	}
	req := request.(*transport.RegisterRequest)
	return &pb.RegisterRequest{
		AccountId: req.AccountId,
		Login:     req.Login,
		Password:  req.Password,
		Service:   req.Service,
	}, nil
}

func _Encode_Login_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil LoginRequest")
	}
	req := request.(*transport.LoginRequest)
	return &pb.LoginRequest{
		Login:    req.Login,
		Password: req.Password,
		Service:  req.Service,
	}, nil
}

func _Encode_PublicKey_Request(ctx context.Context, request interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Encode_GetPermissionsForService_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetPermissionsForServiceRequest")
	}
	req := request.(*transport.GetPermissionsForServiceRequest)
	return &pb.GetPermissionsForServiceRequest{Name: req.Name}, nil
}

func _Encode_Register_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil RegisterResponse")
	}
	resp := response.(*transport.RegisterResponse)
	return &pb.RegisterResponse{Ok: resp.Ok}, nil
}

func _Encode_Login_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil LoginResponse")
	}
	resp := response.(*transport.LoginResponse)
	respToken, err := PtrTypesAccessTokenToProto(resp.Token)
	if err != nil {
		return nil, err
	}
	return &pb.LoginResponse{Token: respToken}, nil
}

func _Encode_PublicKey_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil PublicKeyResponse")
	}
	resp := response.(*transport.PublicKeyResponse)
	respPub, err := ListByteToProto(resp.Pub)
	if err != nil {
		return nil, err
	}
	return &pb.PublicKeyResponse{Pub: respPub}, nil
}

func _Encode_GetPermissionsForService_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetPermissionsForServiceResponse")
	}
	resp := response.(*transport.GetPermissionsForServiceResponse)
	respPermissions, err := ListPtrTypesPermissionToProto(resp.Permissions)
	if err != nil {
		return nil, err
	}
	return &pb.GetPermissionsForServiceResponse{Permissions: respPermissions}, nil
}

func _Decode_Register_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil RegisterRequest")
	}
	req := request.(*pb.RegisterRequest)
	return &transport.RegisterRequest{
		AccountId: uint32(req.AccountId),
		Login:     string(req.Login),
		Password:  string(req.Password),
		Service:   string(req.Service),
	}, nil
}

func _Decode_Login_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil LoginRequest")
	}
	req := request.(*pb.LoginRequest)
	return &transport.LoginRequest{
		Login:    string(req.Login),
		Password: string(req.Password),
		Service:  string(req.Service),
	}, nil
}

func _Decode_PublicKey_Request(ctx context.Context, request interface{}) (interface{}, error) {
	return &empty.Empty{}, nil
}

func _Decode_GetPermissionsForService_Request(ctx context.Context, request interface{}) (interface{}, error) {
	if request == nil {
		return nil, errors.New("nil GetPermissionsForServiceRequest")
	}
	req := request.(*pb.GetPermissionsForServiceRequest)
	return &transport.GetPermissionsForServiceRequest{Name: string(req.Name)}, nil
}

func _Decode_Register_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil RegisterResponse")
	}
	resp := response.(*pb.RegisterResponse)
	return &transport.RegisterResponse{Ok: bool(resp.Ok)}, nil
}

func _Decode_Login_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil LoginResponse")
	}
	resp := response.(*pb.LoginResponse)
	respToken, err := ProtoToPtrTypesAccessToken(resp.Token)
	if err != nil {
		return nil, err
	}
	return &transport.LoginResponse{Token: respToken}, nil
}

func _Decode_PublicKey_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil PublicKeyResponse")
	}
	resp := response.(*pb.PublicKeyResponse)
	respPub, err := ProtoToListByte(resp.Pub)
	if err != nil {
		return nil, err
	}
	return &transport.PublicKeyResponse{Pub: respPub}, nil
}

func _Decode_GetPermissionsForService_Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil GetPermissionsForServiceResponse")
	}
	resp := response.(*pb.GetPermissionsForServiceResponse)
	respPermissions, err := ProtoToListPtrTypesPermission(resp.Permissions)
	if err != nil {
		return nil, err
	}
	return &transport.GetPermissionsForServiceResponse{Permissions: respPermissions}, nil
}
