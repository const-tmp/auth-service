// Code generated by microgen 1.0.5. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "github.com/nullc4t/auth-service/pkg/auth"
	types "github.com/nullc4t/auth-service/pkg/types"
)

// ErrorLoggingMiddleware writes to logger any error, if it is not nil.
func ErrorLoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &errorLoggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type errorLoggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M errorLoggingMiddleware) Register(ctx context.Context, login string, password string, service string, accountId uint32) (ok bool, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "Register", "message", err)
		}
	}()
	return M.next.Register(ctx, login, password, service, accountId)
}

func (M errorLoggingMiddleware) Login(ctx context.Context, login string, password string, service string) (token *types.AccessToken, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "Login", "message", err)
		}
	}()
	return M.next.Login(ctx, login, password, service)
}

func (M errorLoggingMiddleware) PublicKey(ctx context.Context) (pub []byte, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "PublicKey", "message", err)
		}
	}()
	return M.next.PublicKey(ctx)
}

func (M errorLoggingMiddleware) GetPermissionsForService(ctx context.Context, name string) (permissions []*types.Permission, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "GetPermissionsForService", "message", err)
		}
	}()
	return M.next.GetPermissionsForService(ctx, name)
}
