// Code generated by microgen 1.0.5. DO NOT EDIT.

package service

import (
	access "auth/pkg/access"
	service "auth/pkg/mgmt"
	types "auth/pkg/types"
	"context"
	"fmt"
	log "github.com/go-kit/kit/log"
)

// RecoveringMiddleware recovers panics from method calls, writes to provided logger and returns the error of panic as method error.
func RecoveringMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &recoveringMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type recoveringMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M recoveringMiddleware) CreateUserWithLoginPassword(ctx context.Context, login string, pass string) (user *types.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreateUserWithLoginPassword", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateUserWithLoginPassword(ctx, login, pass)
}

func (M recoveringMiddleware) CreateUserWithTelegram(ctx context.Context, id uint64, name string, userN string) (user *types.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreateUserWithTelegram", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateUserWithTelegram(ctx, id, name, userN)
}

func (M recoveringMiddleware) GetAllUsers(ctx context.Context) (users []*types.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetAllUsers", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetAllUsers(ctx)
}

func (M recoveringMiddleware) GetUser(ctx context.Context, userReq *types.User) (user *types.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetUser", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetUser(ctx, userReq)
}

func (M recoveringMiddleware) UpdateUser(ctx context.Context, userReq *types.User) (user *types.User, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "UpdateUser", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.UpdateUser(ctx, userReq)
}

func (M recoveringMiddleware) BlockUser(ctx context.Context, userId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "BlockUser", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.BlockUser(ctx, userId)
}

func (M recoveringMiddleware) UnblockUser(ctx context.Context, userId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "UnblockUser", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.UnblockUser(ctx, userId)
}

func (M recoveringMiddleware) CreateService(ctx context.Context, name string) (s *types.Service, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreateService", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateService(ctx, name)
}

func (M recoveringMiddleware) GetAllServices(ctx context.Context) (ss []*types.Service, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetAllServices", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetAllServices(ctx)
}

func (M recoveringMiddleware) GetService(ctx context.Context, svc *types.Service) (s *types.Service, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetService", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetService(ctx, svc)
}

func (M recoveringMiddleware) CreateAccount(ctx context.Context) (a *types.Account, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreateAccount", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateAccount(ctx)
}

func (M recoveringMiddleware) CreateAccountWithName(ctx context.Context, name string) (a *types.Account, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreateAccountWithName", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreateAccountWithName(ctx, name)
}

func (M recoveringMiddleware) GetAllAccounts(ctx context.Context) (as []*types.Account, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetAllAccounts", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetAllAccounts(ctx)
}

func (M recoveringMiddleware) GetAccount(ctx context.Context, acc *types.Account) (a *types.Account, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetAccount", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetAccount(ctx, acc)
}

func (M recoveringMiddleware) UpdateAccount(ctx context.Context, acc *types.Account) (a *types.Account, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "UpdateAccount", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.UpdateAccount(ctx, acc)
}

func (M recoveringMiddleware) AttachUserToAccount(ctx context.Context, userId uint32, accountId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "AttachUserToAccount", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.AttachUserToAccount(ctx, userId, accountId)
}

func (M recoveringMiddleware) AttachAccountToService(ctx context.Context, serviceId uint32, accountId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "AttachAccountToService", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.AttachAccountToService(ctx, serviceId, accountId)
}

func (M recoveringMiddleware) RemoveAccountFromService(ctx context.Context, serviceId uint32, accountId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "RemoveAccountFromService", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.RemoveAccountFromService(ctx, serviceId, accountId)
}

func (M recoveringMiddleware) CreatePermission(ctx context.Context, serviceId uint32, name string, access *access.Access) (p *types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "CreatePermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.CreatePermission(ctx, serviceId, name, access)
}

func (M recoveringMiddleware) GetPermission(ctx context.Context, p *types.Permission) (perm *types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetPermission(ctx, p)
}

func (M recoveringMiddleware) GetAllPermission(ctx context.Context) (p []*types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetAllPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetAllPermission(ctx)
}

func (M recoveringMiddleware) GetFilteredPermissions(ctx context.Context, p *types.Permission) (perm []*types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetFilteredPermissions", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetFilteredPermissions(ctx, p)
}

func (M recoveringMiddleware) DeletePermission(ctx context.Context, p *types.Permission) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "DeletePermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.DeletePermission(ctx, p)
}

func (M recoveringMiddleware) GetUserPermissions(ctx context.Context, userId uint32) (permissions []*types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetUserPermissions", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetUserPermissions(ctx, userId)
}

func (M recoveringMiddleware) AddUserPermission(ctx context.Context, p *types.Permission, userId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "AddUserPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.AddUserPermission(ctx, p, userId)
}

func (M recoveringMiddleware) RemoveUserPermission(ctx context.Context, permId uint32, userId uint32) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "RemoveUserPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.RemoveUserPermission(ctx, permId, userId)
}
