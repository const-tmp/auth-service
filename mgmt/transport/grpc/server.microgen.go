// Code generated by microgen 1.0.5. DO NOT EDIT.

// DO NOT EDIT.
package transportgrpc

import (
	pb "auth/mgmt/proto"
	transport "auth/mgmt/transport"
	grpc "github.com/go-kit/kit/transport/grpc"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
)

type serviceServer struct {
	pb.UnimplementedMgmtServer
	createService            grpc.Handler
	getAllServices           grpc.Handler
	getService               grpc.Handler
	createAccount            grpc.Handler
	createAccountWithName    grpc.Handler
	getAllAccounts           grpc.Handler
	getAccount               grpc.Handler
	updateAccount            grpc.Handler
	attachAccountToService   grpc.Handler
	removeAccountFromService grpc.Handler
	createPermission         grpc.Handler
	getPermission            grpc.Handler
	getAllPermission         grpc.Handler
	getFilteredPermissions   grpc.Handler
	deletePermission         grpc.Handler
	getUserPermissions       grpc.Handler
	addUserPermission        grpc.Handler
	removeUserPermission     grpc.Handler
}

func NewGRPCServer(endpoints *transport.EndpointsSet, opts ...grpc.ServerOption) pb.MgmtServer {
	return &serviceServer{
		addUserPermission: grpc.NewServer(
			endpoints.AddUserPermissionEndpoint,
			_Decode_AddUserPermission_Request,
			_Encode_AddUserPermission_Response,
			opts...,
		),
		attachAccountToService: grpc.NewServer(
			endpoints.AttachAccountToServiceEndpoint,
			_Decode_AttachAccountToService_Request,
			_Encode_AttachAccountToService_Response,
			opts...,
		),
		createAccount: grpc.NewServer(
			endpoints.CreateAccountEndpoint,
			_Decode_CreateAccount_Request,
			_Encode_CreateAccount_Response,
			opts...,
		),
		createAccountWithName: grpc.NewServer(
			endpoints.CreateAccountWithNameEndpoint,
			_Decode_CreateAccountWithName_Request,
			_Encode_CreateAccountWithName_Response,
			opts...,
		),
		createPermission: grpc.NewServer(
			endpoints.CreatePermissionEndpoint,
			_Decode_CreatePermission_Request,
			_Encode_CreatePermission_Response,
			opts...,
		),
		createService: grpc.NewServer(
			endpoints.CreateServiceEndpoint,
			_Decode_CreateService_Request,
			_Encode_CreateService_Response,
			opts...,
		),
		deletePermission: grpc.NewServer(
			endpoints.DeletePermissionEndpoint,
			_Decode_DeletePermission_Request,
			_Encode_DeletePermission_Response,
			opts...,
		),
		getAccount: grpc.NewServer(
			endpoints.GetAccountEndpoint,
			_Decode_GetAccount_Request,
			_Encode_GetAccount_Response,
			opts...,
		),
		getAllAccounts: grpc.NewServer(
			endpoints.GetAllAccountsEndpoint,
			_Decode_GetAllAccounts_Request,
			_Encode_GetAllAccounts_Response,
			opts...,
		),
		getAllPermission: grpc.NewServer(
			endpoints.GetAllPermissionEndpoint,
			_Decode_GetAllPermission_Request,
			_Encode_GetAllPermission_Response,
			opts...,
		),
		getAllServices: grpc.NewServer(
			endpoints.GetAllServicesEndpoint,
			_Decode_GetAllServices_Request,
			_Encode_GetAllServices_Response,
			opts...,
		),
		getFilteredPermissions: grpc.NewServer(
			endpoints.GetFilteredPermissionsEndpoint,
			_Decode_GetFilteredPermissions_Request,
			_Encode_GetFilteredPermissions_Response,
			opts...,
		),
		getPermission: grpc.NewServer(
			endpoints.GetPermissionEndpoint,
			_Decode_GetPermission_Request,
			_Encode_GetPermission_Response,
			opts...,
		),
		getService: grpc.NewServer(
			endpoints.GetServiceEndpoint,
			_Decode_GetService_Request,
			_Encode_GetService_Response,
			opts...,
		),
		getUserPermissions: grpc.NewServer(
			endpoints.GetUserPermissionsEndpoint,
			_Decode_GetUserPermissions_Request,
			_Encode_GetUserPermissions_Response,
			opts...,
		),
		removeAccountFromService: grpc.NewServer(
			endpoints.RemoveAccountFromServiceEndpoint,
			_Decode_RemoveAccountFromService_Request,
			_Encode_RemoveAccountFromService_Response,
			opts...,
		),
		removeUserPermission: grpc.NewServer(
			endpoints.RemoveUserPermissionEndpoint,
			_Decode_RemoveUserPermission_Request,
			_Encode_RemoveUserPermission_Response,
			opts...,
		),
		updateAccount: grpc.NewServer(
			endpoints.UpdateAccountEndpoint,
			_Decode_UpdateAccount_Request,
			_Encode_UpdateAccount_Response,
			opts...,
		),
	}
}

func newOneToManyStreamServer(endpoint transport.OneToManyStreamEndpoint) transport.OneToManyStreamEndpoint {
	return endpoint
}

func newManyToOneStreamServer(endpoint transport.ManyToOneStreamEndpoint) transport.ManyToOneStreamEndpoint {
	return endpoint
}

func newManyToManyStreamServer(endpoint transport.ManyToManyStreamEndpoint) transport.ManyToManyStreamEndpoint {
	return endpoint
}

func (S *serviceServer) CreateService(ctx context.Context, req *pb.CreateServiceRequest) (*pb.CreateServiceResponse, error) {
	_, resp, err := S.createService.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.CreateServiceResponse), nil
}

func (S *serviceServer) GetAllServices(ctx context.Context, req *empty.Empty) (*pb.GetAllServicesResponse, error) {
	_, resp, err := S.getAllServices.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetAllServicesResponse), nil
}

func (S *serviceServer) GetService(ctx context.Context, req *pb.GetServiceRequest) (*pb.GetServiceResponse, error) {
	_, resp, err := S.getService.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetServiceResponse), nil
}

func (S *serviceServer) CreateAccount(ctx context.Context, req *empty.Empty) (*pb.CreateAccountResponse, error) {
	_, resp, err := S.createAccount.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.CreateAccountResponse), nil
}

func (S *serviceServer) CreateAccountWithName(ctx context.Context, req *pb.CreateAccountWithNameRequest) (*pb.CreateAccountWithNameResponse, error) {
	_, resp, err := S.createAccountWithName.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.CreateAccountWithNameResponse), nil
}

func (S *serviceServer) GetAllAccounts(ctx context.Context, req *empty.Empty) (*pb.GetAllAccountsResponse, error) {
	_, resp, err := S.getAllAccounts.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetAllAccountsResponse), nil
}

func (S *serviceServer) GetAccount(ctx context.Context, req *pb.GetAccountRequest) (*pb.GetAccountResponse, error) {
	_, resp, err := S.getAccount.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetAccountResponse), nil
}

func (S *serviceServer) UpdateAccount(ctx context.Context, req *pb.UpdateAccountRequest) (*pb.UpdateAccountResponse, error) {
	_, resp, err := S.updateAccount.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.UpdateAccountResponse), nil
}

func (S *serviceServer) AttachAccountToService(ctx context.Context, req *pb.AttachAccountToServiceRequest) (*pb.AttachAccountToServiceResponse, error) {
	_, resp, err := S.attachAccountToService.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.AttachAccountToServiceResponse), nil
}

func (S *serviceServer) RemoveAccountFromService(ctx context.Context, req *pb.RemoveAccountFromServiceRequest) (*pb.RemoveAccountFromServiceResponse, error) {
	_, resp, err := S.removeAccountFromService.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.RemoveAccountFromServiceResponse), nil
}

func (S *serviceServer) CreatePermission(ctx context.Context, req *pb.CreatePermissionRequest) (*pb.CreatePermissionResponse, error) {
	_, resp, err := S.createPermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.CreatePermissionResponse), nil
}

func (S *serviceServer) GetPermission(ctx context.Context, req *pb.GetPermissionRequest) (*pb.GetPermissionResponse, error) {
	_, resp, err := S.getPermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetPermissionResponse), nil
}

func (S *serviceServer) GetAllPermission(ctx context.Context, req *empty.Empty) (*pb.GetAllPermissionResponse, error) {
	_, resp, err := S.getAllPermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetAllPermissionResponse), nil
}

func (S *serviceServer) GetFilteredPermissions(ctx context.Context, req *pb.GetFilteredPermissionsRequest) (*pb.GetFilteredPermissionsResponse, error) {
	_, resp, err := S.getFilteredPermissions.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetFilteredPermissionsResponse), nil
}

func (S *serviceServer) DeletePermission(ctx context.Context, req *pb.DeletePermissionRequest) (*pb.DeletePermissionResponse, error) {
	_, resp, err := S.deletePermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.DeletePermissionResponse), nil
}

func (S *serviceServer) GetUserPermissions(ctx context.Context, req *pb.GetUserPermissionsRequest) (*pb.GetUserPermissionsResponse, error) {
	_, resp, err := S.getUserPermissions.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.GetUserPermissionsResponse), nil
}

func (S *serviceServer) AddUserPermission(ctx context.Context, req *pb.AddUserPermissionRequest) (*pb.AddUserPermissionResponse, error) {
	_, resp, err := S.addUserPermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.AddUserPermissionResponse), nil
}

func (S *serviceServer) RemoveUserPermission(ctx context.Context, req *pb.RemoveUserPermissionRequest) (*pb.RemoveUserPermissionResponse, error) {
	_, resp, err := S.removeUserPermission.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.RemoveUserPermissionResponse), nil
}
