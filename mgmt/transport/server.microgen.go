// Code generated by microgen 1.0.5. DO NOT EDIT.

package transport

import (
	mgmt "auth/mgmt"
	"context"
	endpoint "github.com/go-kit/kit/endpoint"
)

func Endpoints(svc mgmt.Service) EndpointsSet {
	return EndpointsSet{
		AddUserPermissionEndpoint:           AddUserPermissionEndpoint(svc),
		AttachAccountToServiceEndpoint:      AttachAccountToServiceEndpoint(svc),
		AttachUserToAccountEndpoint:         AttachUserToAccountEndpoint(svc),
		BlockUserEndpoint:                   BlockUserEndpoint(svc),
		CreateAccountEndpoint:               CreateAccountEndpoint(svc),
		CreateAccountWithNameEndpoint:       CreateAccountWithNameEndpoint(svc),
		CreatePermissionEndpoint:            CreatePermissionEndpoint(svc),
		CreateServiceEndpoint:               CreateServiceEndpoint(svc),
		CreateUserWithLoginPasswordEndpoint: CreateUserWithLoginPasswordEndpoint(svc),
		CreateUserWithTelegramEndpoint:      CreateUserWithTelegramEndpoint(svc),
		DeletePermissionEndpoint:            DeletePermissionEndpoint(svc),
		GetAccountEndpoint:                  GetAccountEndpoint(svc),
		GetAllAccountsEndpoint:              GetAllAccountsEndpoint(svc),
		GetAllPermissionEndpoint:            GetAllPermissionEndpoint(svc),
		GetAllServicesEndpoint:              GetAllServicesEndpoint(svc),
		GetAllUsersEndpoint:                 GetAllUsersEndpoint(svc),
		GetFilteredPermissionsEndpoint:      GetFilteredPermissionsEndpoint(svc),
		GetPermissionEndpoint:               GetPermissionEndpoint(svc),
		GetServiceEndpoint:                  GetServiceEndpoint(svc),
		GetUserEndpoint:                     GetUserEndpoint(svc),
		GetUserPermissionsEndpoint:          GetUserPermissionsEndpoint(svc),
		RemoveAccountFromServiceEndpoint:    RemoveAccountFromServiceEndpoint(svc),
		RemoveUserPermissionEndpoint:        RemoveUserPermissionEndpoint(svc),
		UnblockUserEndpoint:                 UnblockUserEndpoint(svc),
		UpdateAccountEndpoint:               UpdateAccountEndpoint(svc),
		UpdateUserEndpoint:                  UpdateUserEndpoint(svc),
	}
}

func CreateUserWithLoginPasswordEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateUserWithLoginPasswordRequest)
		res0, res1 := svc.CreateUserWithLoginPassword(arg0, req.Login, req.Pass)
		return &CreateUserWithLoginPasswordResponse{User: res0}, res1
	}
}

func CreateUserWithTelegramEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateUserWithTelegramRequest)
		res0, res1 := svc.CreateUserWithTelegram(arg0, req.Id, req.Name, req.UserN)
		return &CreateUserWithTelegramResponse{User: res0}, res1
	}
}

func GetAllUsersEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.GetAllUsers(arg0)
		return &GetAllUsersResponse{Users: res0}, res1
	}
}

func GetUserEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUserRequest)
		res0, res1 := svc.GetUser(arg0, req.UserReq)
		return &GetUserResponse{User: res0}, res1
	}
}

func UpdateUserEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateUserRequest)
		res0, res1 := svc.UpdateUser(arg0, req.UserReq)
		return &UpdateUserResponse{User: res0}, res1
	}
}

func BlockUserEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*BlockUserRequest)
		res0, res1 := svc.BlockUser(arg0, req.UserId)
		return &BlockUserResponse{Ok: res0}, res1
	}
}

func UnblockUserEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*UnblockUserRequest)
		res0, res1 := svc.UnblockUser(arg0, req.UserId)
		return &UnblockUserResponse{Ok: res0}, res1
	}
}

func CreateServiceEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateServiceRequest)
		res0, res1 := svc.CreateService(arg0, req.Name)
		return &CreateServiceResponse{S: res0}, res1
	}
}

func GetAllServicesEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.GetAllServices(arg0)
		return &GetAllServicesResponse{Ss: res0}, res1
	}
}

func GetServiceEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetServiceRequest)
		res0, res1 := svc.GetService(arg0, req.Svc)
		return &GetServiceResponse{S: res0}, res1
	}
}

func CreateAccountEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.CreateAccount(arg0)
		return &CreateAccountResponse{A: res0}, res1
	}
}

func CreateAccountWithNameEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreateAccountWithNameRequest)
		res0, res1 := svc.CreateAccountWithName(arg0, req.Name)
		return &CreateAccountWithNameResponse{A: res0}, res1
	}
}

func GetAllAccountsEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.GetAllAccounts(arg0)
		return &GetAllAccountsResponse{As: res0}, res1
	}
}

func GetAccountEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetAccountRequest)
		res0, res1 := svc.GetAccount(arg0, req.Acc)
		return &GetAccountResponse{A: res0}, res1
	}
}

func UpdateAccountEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateAccountRequest)
		res0, res1 := svc.UpdateAccount(arg0, req.Acc)
		return &UpdateAccountResponse{A: res0}, res1
	}
}

func AttachUserToAccountEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*AttachUserToAccountRequest)
		res0, res1 := svc.AttachUserToAccount(arg0, req.UserId, req.AccountId)
		return &AttachUserToAccountResponse{Ok: res0}, res1
	}
}

func AttachAccountToServiceEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*AttachAccountToServiceRequest)
		res0, res1 := svc.AttachAccountToService(arg0, req.ServiceId, req.AccountId)
		return &AttachAccountToServiceResponse{Ok: res0}, res1
	}
}

func RemoveAccountFromServiceEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*RemoveAccountFromServiceRequest)
		res0, res1 := svc.RemoveAccountFromService(arg0, req.ServiceId, req.AccountId)
		return &RemoveAccountFromServiceResponse{Ok: res0}, res1
	}
}

func CreatePermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*CreatePermissionRequest)
		res0, res1 := svc.CreatePermission(arg0, req.ServiceId, req.Name, req.Access)
		return &CreatePermissionResponse{P: res0}, res1
	}
}

func GetPermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetPermissionRequest)
		res0, res1 := svc.GetPermission(arg0, req.P)
		return &GetPermissionResponse{Perm: res0}, res1
	}
}

func GetAllPermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		res0, res1 := svc.GetAllPermission(arg0)
		return &GetAllPermissionResponse{P: res0}, res1
	}
}

func GetFilteredPermissionsEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetFilteredPermissionsRequest)
		res0, res1 := svc.GetFilteredPermissions(arg0, req.P)
		return &GetFilteredPermissionsResponse{Perm: res0}, res1
	}
}

func DeletePermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeletePermissionRequest)
		res0, res1 := svc.DeletePermission(arg0, req.P)
		return &DeletePermissionResponse{Ok: res0}, res1
	}
}

func GetUserPermissionsEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetUserPermissionsRequest)
		res0, res1 := svc.GetUserPermissions(arg0, req.UserId)
		return &GetUserPermissionsResponse{Permissions: res0}, res1
	}
}

func AddUserPermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*AddUserPermissionRequest)
		res0, res1 := svc.AddUserPermission(arg0, req.P, req.UserId)
		return &AddUserPermissionResponse{Ok: res0}, res1
	}
}

func RemoveUserPermissionEndpoint(svc mgmt.Service) endpoint.Endpoint {
	return func(arg0 context.Context, request interface{}) (interface{}, error) {
		req := request.(*RemoveUserPermissionRequest)
		res0, res1 := svc.RemoveUserPermission(arg0, req.PermId, req.UserId)
		return &RemoveUserPermissionResponse{Ok: res0}, res1
	}
}
