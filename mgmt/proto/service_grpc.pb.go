// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtClient is the client API for Mgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtClient interface {
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	GetAllServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllServicesResponse, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	CreateAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateAccountWithName(ctx context.Context, in *CreateAccountWithNameRequest, opts ...grpc.CallOption) (*CreateAccountWithNameResponse, error)
	GetAllAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllAccountsResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	UpdateMapAccount(ctx context.Context, in *UpdateMapAccountRequest, opts ...grpc.CallOption) (*UpdateMapAccountResponse, error)
	AttachAccountToService(ctx context.Context, in *AttachAccountToServiceRequest, opts ...grpc.CallOption) (*AttachAccountToServiceResponse, error)
	RemoveAccountFromService(ctx context.Context, in *RemoveAccountFromServiceRequest, opts ...grpc.CallOption) (*RemoveAccountFromServiceResponse, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	GetAllPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPermissionResponse, error)
	GetFilteredPermissions(ctx context.Context, in *GetFilteredPermissionsRequest, opts ...grpc.CallOption) (*GetFilteredPermissionsResponse, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...grpc.CallOption) (*AddUserPermissionResponse, error)
	RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest, opts ...grpc.CallOption) (*RemoveUserPermissionResponse, error)
}

type mgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtClient(cc grpc.ClientConnInterface) MgmtClient {
	return &mgmtClient{cc}
}

func (c *mgmtClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetAllServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllServicesResponse, error) {
	out := new(GetAllServicesResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetAllServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) CreateAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) CreateAccountWithName(ctx context.Context, in *CreateAccountWithNameRequest, opts ...grpc.CallOption) (*CreateAccountWithNameResponse, error) {
	out := new(CreateAccountWithNameResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/CreateAccountWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetAllAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllAccountsResponse, error) {
	out := new(GetAllAccountsResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetAllAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) UpdateMapAccount(ctx context.Context, in *UpdateMapAccountRequest, opts ...grpc.CallOption) (*UpdateMapAccountResponse, error) {
	out := new(UpdateMapAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/UpdateMapAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) AttachAccountToService(ctx context.Context, in *AttachAccountToServiceRequest, opts ...grpc.CallOption) (*AttachAccountToServiceResponse, error) {
	out := new(AttachAccountToServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/AttachAccountToService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) RemoveAccountFromService(ctx context.Context, in *RemoveAccountFromServiceRequest, opts ...grpc.CallOption) (*RemoveAccountFromServiceResponse, error) {
	out := new(RemoveAccountFromServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/RemoveAccountFromService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error) {
	out := new(CreatePermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetAllPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPermissionResponse, error) {
	out := new(GetAllPermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetAllPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetFilteredPermissions(ctx context.Context, in *GetFilteredPermissionsRequest, opts ...grpc.CallOption) (*GetFilteredPermissionsResponse, error) {
	out := new(GetFilteredPermissionsResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetFilteredPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/GetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...grpc.CallOption) (*AddUserPermissionResponse, error) {
	out := new(AddUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/AddUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtClient) RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest, opts ...grpc.CallOption) (*RemoveUserPermissionResponse, error) {
	out := new(RemoveUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/proto.Mgmt/RemoveUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtServer is the server API for Mgmt service.
// All implementations must embed UnimplementedMgmtServer
// for forward compatibility
type MgmtServer interface {
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	GetAllServices(context.Context, *emptypb.Empty) (*GetAllServicesResponse, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	CreateAccount(context.Context, *emptypb.Empty) (*CreateAccountResponse, error)
	CreateAccountWithName(context.Context, *CreateAccountWithNameRequest) (*CreateAccountWithNameResponse, error)
	GetAllAccounts(context.Context, *emptypb.Empty) (*GetAllAccountsResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	UpdateMapAccount(context.Context, *UpdateMapAccountRequest) (*UpdateMapAccountResponse, error)
	AttachAccountToService(context.Context, *AttachAccountToServiceRequest) (*AttachAccountToServiceResponse, error)
	RemoveAccountFromService(context.Context, *RemoveAccountFromServiceRequest) (*RemoveAccountFromServiceResponse, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	GetAllPermission(context.Context, *emptypb.Empty) (*GetAllPermissionResponse, error)
	GetFilteredPermissions(context.Context, *GetFilteredPermissionsRequest) (*GetFilteredPermissionsResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	AddUserPermission(context.Context, *AddUserPermissionRequest) (*AddUserPermissionResponse, error)
	RemoveUserPermission(context.Context, *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error)
	mustEmbedUnimplementedMgmtServer()
}

// UnimplementedMgmtServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtServer struct {
}

func (UnimplementedMgmtServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedMgmtServer) GetAllServices(context.Context, *emptypb.Empty) (*GetAllServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (UnimplementedMgmtServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedMgmtServer) CreateAccount(context.Context, *emptypb.Empty) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedMgmtServer) CreateAccountWithName(context.Context, *CreateAccountWithNameRequest) (*CreateAccountWithNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountWithName not implemented")
}
func (UnimplementedMgmtServer) GetAllAccounts(context.Context, *emptypb.Empty) (*GetAllAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccounts not implemented")
}
func (UnimplementedMgmtServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedMgmtServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedMgmtServer) UpdateMapAccount(context.Context, *UpdateMapAccountRequest) (*UpdateMapAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapAccount not implemented")
}
func (UnimplementedMgmtServer) AttachAccountToService(context.Context, *AttachAccountToServiceRequest) (*AttachAccountToServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachAccountToService not implemented")
}
func (UnimplementedMgmtServer) RemoveAccountFromService(context.Context, *RemoveAccountFromServiceRequest) (*RemoveAccountFromServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccountFromService not implemented")
}
func (UnimplementedMgmtServer) CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedMgmtServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedMgmtServer) GetAllPermission(context.Context, *emptypb.Empty) (*GetAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPermission not implemented")
}
func (UnimplementedMgmtServer) GetFilteredPermissions(context.Context, *GetFilteredPermissionsRequest) (*GetFilteredPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredPermissions not implemented")
}
func (UnimplementedMgmtServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedMgmtServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedMgmtServer) AddUserPermission(context.Context, *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPermission not implemented")
}
func (UnimplementedMgmtServer) RemoveUserPermission(context.Context, *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserPermission not implemented")
}
func (UnimplementedMgmtServer) mustEmbedUnimplementedMgmtServer() {}

// UnsafeMgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtServer will
// result in compilation errors.
type UnsafeMgmtServer interface {
	mustEmbedUnimplementedMgmtServer()
}

func RegisterMgmtServer(s grpc.ServiceRegistrar, srv MgmtServer) {
	s.RegisterService(&Mgmt_ServiceDesc, srv)
}

func _Mgmt_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetAllServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).CreateAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_CreateAccountWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).CreateAccountWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/CreateAccountWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).CreateAccountWithName(ctx, req.(*CreateAccountWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetAllAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetAllAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetAllAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetAllAccounts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_UpdateMapAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).UpdateMapAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/UpdateMapAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).UpdateMapAccount(ctx, req.(*UpdateMapAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_AttachAccountToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachAccountToServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).AttachAccountToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/AttachAccountToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).AttachAccountToService(ctx, req.(*AttachAccountToServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_RemoveAccountFromService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccountFromServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).RemoveAccountFromService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/RemoveAccountFromService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).RemoveAccountFromService(ctx, req.(*RemoveAccountFromServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetAllPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetAllPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetAllPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetAllPermission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetFilteredPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetFilteredPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetFilteredPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetFilteredPermissions(ctx, req.(*GetFilteredPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/GetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_AddUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).AddUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/AddUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).AddUserPermission(ctx, req.(*AddUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgmt_RemoveUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtServer).RemoveUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mgmt/RemoveUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtServer).RemoveUserPermission(ctx, req.(*RemoveUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mgmt_ServiceDesc is the grpc.ServiceDesc for Mgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mgmt",
	HandlerType: (*MgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Mgmt_CreateService_Handler,
		},
		{
			MethodName: "GetAllServices",
			Handler:    _Mgmt_GetAllServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Mgmt_GetService_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Mgmt_CreateAccount_Handler,
		},
		{
			MethodName: "CreateAccountWithName",
			Handler:    _Mgmt_CreateAccountWithName_Handler,
		},
		{
			MethodName: "GetAllAccounts",
			Handler:    _Mgmt_GetAllAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Mgmt_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Mgmt_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateMapAccount",
			Handler:    _Mgmt_UpdateMapAccount_Handler,
		},
		{
			MethodName: "AttachAccountToService",
			Handler:    _Mgmt_AttachAccountToService_Handler,
		},
		{
			MethodName: "RemoveAccountFromService",
			Handler:    _Mgmt_RemoveAccountFromService_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _Mgmt_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _Mgmt_GetPermission_Handler,
		},
		{
			MethodName: "GetAllPermission",
			Handler:    _Mgmt_GetAllPermission_Handler,
		},
		{
			MethodName: "GetFilteredPermissions",
			Handler:    _Mgmt_GetFilteredPermissions_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Mgmt_DeletePermission_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _Mgmt_GetUserPermissions_Handler,
		},
		{
			MethodName: "AddUserPermission",
			Handler:    _Mgmt_AddUserPermission_Handler,
		},
		{
			MethodName: "RemoveUserPermission",
			Handler:    _Mgmt_RemoveUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
