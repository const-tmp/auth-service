// Code generated by microgen 1.0.5. DO NOT EDIT.

package service

import (
	service "auth/auth/authz"
	types "auth/pkg/types"
	"context"
	"fmt"
	log "github.com/go-kit/kit/log"
)

// RecoveringMiddleware recovers panics from method calls, writes to provided logger and returns the error of panic as method error.
func RecoveringMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &recoveringMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type recoveringMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M recoveringMiddleware) GetPermissions(ctx context.Context, serviceID uint) (p []types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetPermissions", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetPermissions(ctx, serviceID)
}

func (M recoveringMiddleware) AddPermission(ctx context.Context, perm types.Permission) (p types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "AddPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.AddPermission(ctx, perm)
}

func (M recoveringMiddleware) RemovePermission(ctx context.Context, p types.Permission) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "RemovePermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.RemovePermission(ctx, p)
}

func (M recoveringMiddleware) GetUserPermissions(ctx context.Context, p types.Permission, userID uint) (permissions []types.Permission, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "GetUserPermissions", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.GetUserPermissions(ctx, p, userID)
}

func (M recoveringMiddleware) AddUserPermission(ctx context.Context, permID uint, userID uint) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "AddUserPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.AddUserPermission(ctx, permID, userID)
}

func (M recoveringMiddleware) RemoveUserPermission(ctx context.Context, permID uint, userID uint) (ok bool, err error) {
	defer func() {
		if r := recover(); r != nil {
			M.logger.Log("method", "RemoveUserPermission", "message", r)
			err = fmt.Errorf("%v", r)
		}
	}()
	return M.next.RemoveUserPermission(ctx, permID, userID)
}
