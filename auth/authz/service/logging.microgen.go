// Code generated by microgen 1.0.5. DO NOT EDIT.

package service

import (
	service "auth/auth/authz"
	types "auth/pkg/types"
	"context"
	log "github.com/go-kit/kit/log"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M loggingMiddleware) GetPermissions(arg0 context.Context, arg1 uint) (res0 []types.Permission, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetPermissions",
			"message", "GetPermissions called",
			"request", logGetPermissionsRequest{ServiceID: arg1},
			"response", logGetPermissionsResponse{P: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetPermissions(arg0, arg1)
}

func (M loggingMiddleware) AddPermission(arg0 context.Context, arg1 types.Permission) (res0 types.Permission, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "AddPermission",
			"message", "AddPermission called",
			"request", logAddPermissionRequest{Perm: arg1},
			"response", logAddPermissionResponse{P: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.AddPermission(arg0, arg1)
}

func (M loggingMiddleware) RemovePermission(arg0 context.Context, arg1 types.Permission) (res0 bool, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "RemovePermission",
			"message", "RemovePermission called",
			"request", logRemovePermissionRequest{P: arg1},
			"response", logRemovePermissionResponse{Ok: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.RemovePermission(arg0, arg1)
}

func (M loggingMiddleware) GetUserPermissions(arg0 context.Context, arg1 types.Permission, arg2 uint) (res0 []types.Permission, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetUserPermissions",
			"message", "GetUserPermissions called",
			"request", logGetUserPermissionsRequest{
				P:      arg1,
				UserID: arg2,
			},
			"response", logGetUserPermissionsResponse{Permissions: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetUserPermissions(arg0, arg1, arg2)
}

func (M loggingMiddleware) AddUserPermission(arg0 context.Context, arg1 uint, arg2 uint) (res0 bool, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "AddUserPermission",
			"message", "AddUserPermission called",
			"request", logAddUserPermissionRequest{
				PermID: arg1,
				UserID: arg2,
			},
			"response", logAddUserPermissionResponse{Ok: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.AddUserPermission(arg0, arg1, arg2)
}

func (M loggingMiddleware) RemoveUserPermission(arg0 context.Context, arg1 uint, arg2 uint) (res0 bool, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "RemoveUserPermission",
			"message", "RemoveUserPermission called",
			"request", logRemoveUserPermissionRequest{
				PermID: arg1,
				UserID: arg2,
			},
			"response", logRemoveUserPermissionResponse{Ok: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.RemoveUserPermission(arg0, arg1, arg2)
}

type (
	logGetPermissionsRequest struct {
		ServiceID uint
	}
	logGetPermissionsResponse struct {
		P []types.Permission
	}
	logAddPermissionRequest struct {
		Perm types.Permission
	}
	logAddPermissionResponse struct {
		P types.Permission
	}
	logRemovePermissionRequest struct {
		P types.Permission
	}
	logRemovePermissionResponse struct {
		Ok bool
	}
	logGetUserPermissionsRequest struct {
		P      types.Permission
		UserID uint
	}
	logGetUserPermissionsResponse struct {
		Permissions []types.Permission
	}
	logAddUserPermissionRequest struct {
		PermID uint
		UserID uint
	}
	logAddUserPermissionResponse struct {
		Ok bool
	}
	logRemoveUserPermissionRequest struct {
		PermID uint
		UserID uint
	}
	logRemoveUserPermissionResponse struct {
		Ok bool
	}
)
